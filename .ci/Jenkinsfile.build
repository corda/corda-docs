#!groovy
class Configuration {
    String ARTIFACTORY_BUILD_NAME = 'Docsite Docker image'
    String ARTIFACTORY_SERVER = 'software.r3.com'
    String getDockerRegistry() {
        return "${dockerRepo}.${ARTIFACTORY_SERVER}"
    }
    String getTargetRepo() {
        return "${dockerRepo}-local"
    }
    String getDeploymentCredentials() {
        return deploymentCredentials
    }
    String getDocsite() {
        return docsite
    }
    String getBuildName() {
        return "${ARTIFACTORY_BUILD_NAME} (${branch})"
    }
    boolean getDefaultPublish() {
        return defaultPublish
    }
    void setBranch(String branch) {
        this.branch = branch
    }
    String dockerRepo
    String deploymentCredentials
    String docsite
    String defaultPublish
    String branch
    Configuration(dockerRepo,deploymentCredentials, docsite, defaultPublish) {
        this.dockerRepo = dockerRepo
        this.deploymentCredentials = deploymentCredentials
        this.docsite = docsite
        this.defaultPublish = defaultPublish
    }
}

Configuration config
switch (env.BRANCH_NAME) {
    case ~/publish-.*$/: config = new Configuration('docsite','docsite-production', '10.10.0.4', true); break;
    case "master": config = new Configuration('docsite-dev', 'docsite-staging', 'docs-staging.corda.net', true);
    default: config = new Configuration('docsite-dev', 'docsite-staging', 'docs-staging.corda.net', false);
}
config.branch = env.BRANCH_NAME

def MAKE_PARAMS = [
    'PROD_IMAGE="${IMAGE}"',         // do not change the quotes! Variable is for Linux Shell!!
    'PROD_IMAGE_TAG="${IMAGE_TAG}"', // do not change the quotes! Variable is for Linux Shell!!
]

def MAKE_BUILD_TARGETS = [
    'prod-docker-image',
]

pipeline {
    agent { label "basic" }

    parameters {
        booleanParam defaultValue: config.defaultPublish, description: 'Publishing Docsite Docker image?', name: 'DO_PUBLISH'
        string defaultValue: config.docsite, description: 'Address of server to publish Docsite Docker image to', name: 'DOCSITE_SERVER', trim: true
    }

    environment {
        IMAGE_TAG="${env.GIT_COMMIT[0..5]}"
        IMAGE="${config.dockerRegistry}/corda-docs-nginx"
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds() // this makes killAllExistingBuildsForJob always do nothing
        buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
        ansiColor('xterm')
    }

    stages {
        stage('Build Docker image') {
            steps {
                sh """
                    make ${MAKE_PARAMS.join(' ')} ${MAKE_BUILD_TARGETS.join(' ')}
                """
                sh 'docker images'
            }
        }
        stage('Publish Docker image to Registry') {
            when {
                expression { params.DO_PUBLISH }
            }
            steps {
                script {
                    docker.image("${env.IMAGE}:${env.IMAGE_TAG}").tag('latest')
                }

                echo "Creating Artifactory server"
                rtServer (
                    id: 'R3-Artifactory',
                    url: 'https://software.r3.com/artifactory',
                    credentialsId: 'docsite-publisher'
                )
                echo "Pushing '${env.IMAGE}:${env.IMAGE_TAG}' image to Artifactory Docker registry"
                rtDockerPush (
                    serverId: 'R3-Artifactory',
                    image: "${env.IMAGE}:${env.IMAGE_TAG}",
                    targetRepo: config.getTargetRepo(),
                    buildName: config.getBuildName()
                )
                echo "Pushing '${env.IMAGE}:${env.IMAGE_TAG}' image to Artifactory Docker registry as 'latest'"
                rtDockerPush (
                    serverId: 'R3-Artifactory',
                    image: "${env.IMAGE}:latest",
                    targetRepo: config.getTargetRepo(),
                    buildName: config.getBuildName()
                )
                echo 'Publishing build info to Artifactory server'
                rtPublishBuildInfo (
                    serverId: 'R3-Artifactory',
                    buildName: config.getBuildName()
                )
            }
        }
        stage('Deploy Docker image to staging') {
            when {
                expression { params.DO_PUBLISH }
            }
            steps {
                sshagent([config.deploymentCredentials]) {
                    sh "ssh -F /dev/null -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docsite@${params.DOCSITE_SERVER} update-docsite"
                }
            }
        }
    }

    post {
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
